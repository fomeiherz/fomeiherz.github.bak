<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶知秋的博客</title>
  
  <subtitle>不迷失，不彷徨</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.fomeiherz.top/"/>
  <updated>2019-03-20T05:14:36.451Z</updated>
  <id>https://blog.fomeiherz.top/</id>
  
  <author>
    <name>Fomeiherz</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to use postman to bulk insert data in Elasticsearch</title>
    <link href="https://blog.fomeiherz.top/2019/03/20/How-to-use-postman-to-bulk-insert-data-in-Elasticsearch/"/>
    <id>https://blog.fomeiherz.top/2019/03/20/How-to-use-postman-to-bulk-insert-data-in-Elasticsearch/</id>
    <published>2019-03-20T05:08:42.000Z</published>
    <updated>2019-03-20T05:14:36.451Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Request method: POST</li><li>Headers: [“Content-Type”: “application/x-ndjson”]</li><li>Body type: raw</li><li>Body content format: Every json string must newline.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;Request method: POST&lt;/li&gt;
&lt;li&gt;Headers: [“Content-Type”: “application/x-ndjson”]&lt;/li&gt;
&lt;li&gt;Body type: raw&lt;/li&gt;
&lt;li&gt;Body content forma
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python3 + Centos7: No module named &#39;MySQLdb&#39;</title>
    <link href="https://blog.fomeiherz.top/2019/03/19/No-module-named-MySQLdb/"/>
    <id>https://blog.fomeiherz.top/2019/03/19/No-module-named-MySQLdb/</id>
    <published>2019-03-19T09:35:08.000Z</published>
    <updated>2019-03-19T10:13:26.567Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install mariadb-devel  </span><br><span class="line">sudo pip3 install mysqlclient</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Apriori Algorithm</title>
    <link href="https://blog.fomeiherz.top/2018/07/08/Apriori-Algorithm/"/>
    <id>https://blog.fomeiherz.top/2018/07/08/Apriori-Algorithm/</id>
    <published>2018-07-07T17:00:29.000Z</published>
    <updated>2018-07-07T17:01:35.877Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;&quot;</span><br><span class="line">Apriori exercise.</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">def load_dataset():</span><br><span class="line">    return [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">输入：源数据</span><br><span class="line">功能：从源数据提取候选项</span><br><span class="line">返回：1item是大小为1的所有候选项集的集合</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def create_1item(dataset):</span><br><span class="line">    k_items = []</span><br><span class="line">    for transaction in dataset:</span><br><span class="line">        for item in transaction:</span><br><span class="line">            if [item] not in k_items:</span><br><span class="line">                k_items.append([item])</span><br><span class="line">    k_items.sort()</span><br><span class="line">    return list(map(frozenset, k_items))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">输入：</span><br><span class="line">    总数据集</span><br><span class="line">    k项的所有组合</span><br><span class="line">    最小支持度</span><br><span class="line">功能：计算k_items中的项集在数据集中的支持度</span><br><span class="line">输出：</span><br><span class="line">    满足支持度的候选项</span><br><span class="line">    各个候选项支持度</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">def scan_dataset(dataset, k_items, min_support):</span><br><span class="line">    k_item_dict = &#123;&#125;</span><br><span class="line">    for transaction in dataset:</span><br><span class="line">        for k_item in k_items:</span><br><span class="line">            # 对于每一个候选项集k_item，检查是否是transaction的一部分</span><br><span class="line">            if k_item.issubset(transaction):</span><br><span class="line">                k_item_dict[k_item] = k_item_dict.get(k_item, 0) + 1</span><br><span class="line">    # 总记录数</span><br><span class="line">    dataset_count = float(len(dataset))</span><br><span class="line">    result_list = []</span><br><span class="line">    support_dict = &#123;&#125;</span><br><span class="line">    for k_item in k_item_dict:</span><br><span class="line">        # 每个项集的支持度 = 包含该项集的记录 / 总记录</span><br><span class="line">        support = k_item_dict[k_item] / dataset_count</span><br><span class="line">        # 将满足最小支持度的项集，加入retList</span><br><span class="line">        if support &gt;= min_support:</span><br><span class="line">            result_list.insert(0, k_item)</span><br><span class="line">        # 汇总支持度数据</span><br><span class="line">        support_dict[k_item] = support</span><br><span class="line">    return result_list, support_dict</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    k_items = create_1item(load_dataset())</span><br><span class="line">    result_tuple = scan_dataset(load_dataset(), k_items, 0.5)</span><br><span class="line">    # print(type(result_tuple))</span><br><span class="line">    print(result_tuple[0])</span><br><span class="line">    print(result_tuple[1])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于用户的协同过滤算法</title>
    <link href="https://blog.fomeiherz.top/2018/07/04/%E5%9F%BA%E4%BA%8E%E7%94%A8%E6%88%B7%E7%9A%84%E5%8D%8F%E5%90%8C%E8%BF%87%E6%BB%A4%E7%AE%97%E6%B3%95/"/>
    <id>https://blog.fomeiherz.top/2018/07/04/基于用户的协同过滤算法/</id>
    <published>2018-07-04T11:57:19.000Z</published>
    <updated>2018-07-07T11:55:33.214Z</updated>
    
    <content type="html"><![CDATA[<p>电影点赞数据：<a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">https://grouplens.org/datasets/movielens/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">import sys</span><br><span class="line">from texttable import Texttable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   使用 |A&amp;B|/sqrt(|A||B|)计算余弦距离</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">def calcCosDistSpe(user1, user2):</span><br><span class="line">    avg_x = 0.0</span><br><span class="line">    avg_y = 0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x += key[1]</span><br><span class="line">    avg_x = avg_x / len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y += key[1]</span><br><span class="line">    avg_y = avg_y / len(user2)</span><br><span class="line"></span><br><span class="line">    u1_u2 = 0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[1] &gt; avg_x and key2[1] &gt; avg_y and key1[0] == key2[0]:</span><br><span class="line">                u1_u2 += 1</span><br><span class="line">    u1u2 = len(user1) * len(user2) * 1.0</span><br><span class="line">    sx_sy = u1_u2 / math.sqrt(u1u2)</span><br><span class="line">    return sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算余弦距离</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">def calcCosDist(user1, user2):</span><br><span class="line">    sum_x = 0.0</span><br><span class="line">    sum_y = 0.0</span><br><span class="line">    sum_xy = 0.0</span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0] == key2[0]:</span><br><span class="line">                sum_xy += key1[1] * key2[1]</span><br><span class="line">                sum_y += key2[1] * key2[1]</span><br><span class="line">                sum_x += key1[1] * key1[1]</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0:</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy = math.sqrt(sum_x * sum_y)</span><br><span class="line">    return sum_xy / sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#   相似余弦距离</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">def calcSimlaryCosDist(user1, user2):</span><br><span class="line">    sum_x = 0.0</span><br><span class="line">    sum_y = 0.0</span><br><span class="line">    sum_xy = 0.0</span><br><span class="line">    avg_x = 0.0</span><br><span class="line">    avg_y = 0.0</span><br><span class="line">    for key in user1:</span><br><span class="line">        avg_x += key[1]</span><br><span class="line">    avg_x = avg_x / len(user1)</span><br><span class="line"></span><br><span class="line">    for key in user2:</span><br><span class="line">        avg_y += key[1]</span><br><span class="line">    avg_y = avg_y / len(user2)</span><br><span class="line"></span><br><span class="line">    for key1 in user1:</span><br><span class="line">        for key2 in user2:</span><br><span class="line">            if key1[0] == key2[0]:</span><br><span class="line">                sum_xy += (key1[1] - avg_x) * (key2[1] - avg_y)</span><br><span class="line">                sum_y += (key2[1] - avg_y) * (key2[1] - avg_y)</span><br><span class="line">        sum_x += (key1[1] - avg_x) * (key1[1] - avg_x)</span><br><span class="line"></span><br><span class="line">    if sum_xy == 0.0:</span><br><span class="line">        return 0</span><br><span class="line">    sx_sy = math.sqrt(sum_x * sum_y)</span><br><span class="line">    return sum_xy / sx_sy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   读取文件</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">def readFile(file_name):</span><br><span class="line">    contents_lines = []</span><br><span class="line">    f = open(file_name, &quot;r&quot;)</span><br><span class="line">    contents_lines = f.readlines()</span><br><span class="line">    f.close()</span><br><span class="line">    return contents_lines</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   解压rating信息，格式：用户id,电影id,用户rating,时间</span><br><span class="line">#   输入：数据集合</span><br><span class="line">#   输出:已经解压的排名信息</span><br><span class="line">#</span><br><span class="line">def getRatingInformation(ratings):</span><br><span class="line">    rates = []</span><br><span class="line">    for line in ratings[1:]:</span><br><span class="line">        rate = line.split(&quot;,&quot;)</span><br><span class="line">        rates.append([int(rate[0]), int(rate[1]), float(rate[2])])</span><br><span class="line">    return rates</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   生成用户评分的数据结构</span><br><span class="line">#</span><br><span class="line">#   输入:所以数据 [[2,1,5],[2,4,2]...]</span><br><span class="line">#   输出:1.用户打分字典 2.电影字典</span><br><span class="line">#   使用字典，key是用户id，value是用户对电影的评价，</span><br><span class="line">#   rate_dic[2]=[(1,5),(4,2)].... 表示用户2对电影1的评分是5，对电影4的评分是2</span><br><span class="line">#</span><br><span class="line">def createUserRankDic(rates):</span><br><span class="line">    user_rate_dic = &#123;&#125;</span><br><span class="line">    item_to_user = &#123;&#125;</span><br><span class="line">    for i in rates:</span><br><span class="line">        user_rank = (i[1], i[2])</span><br><span class="line">        if i[0] in user_rate_dic:</span><br><span class="line">            user_rate_dic[i[0]].append(user_rank)</span><br><span class="line">        else:</span><br><span class="line">            user_rate_dic[i[0]] = [user_rank]</span><br><span class="line"></span><br><span class="line">        if i[1] in item_to_user:</span><br><span class="line">            item_to_user[i[1]].append(i[0])</span><br><span class="line">        else:</span><br><span class="line">            item_to_user[i[1]] = [i[0]]</span><br><span class="line"></span><br><span class="line">    return user_rate_dic, item_to_user</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   计算与指定用户最相近的邻居</span><br><span class="line">#   输入：</span><br><span class="line">#       指定用户ID</span><br><span class="line">#       所有用户数据。用户字典：dic[用户id]=[(电影id,电影评分)...]</span><br><span class="line">#       所有物品数据。电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">#   输出：与指定用户最相邻的邻居列表</span><br><span class="line">#</span><br><span class="line">def calcNearestNeighbor(userid, users_dic, item_dic):</span><br><span class="line">    neighbors = []</span><br><span class="line">    # neighbors.append(userid)</span><br><span class="line">    for item in users_dic[userid]:</span><br><span class="line">        for neighbor in item_dic[item[0]]:</span><br><span class="line">            if neighbor != userid and neighbor not in neighbors:</span><br><span class="line">                # 共同喜欢item物品的用户</span><br><span class="line">                neighbors.append(neighbor)</span><br><span class="line"></span><br><span class="line">    neighbors_dist = []</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        # calcSimlaryCosDist  calcCosDist  calcCosDistSpe</span><br><span class="line">        dist = calcSimlaryCosDist(users_dic[userid], users_dic[neighbor])</span><br><span class="line">        neighbors_dist.append([dist, neighbor])</span><br><span class="line">    neighbors_dist.sort(reverse=True)</span><br><span class="line">    # print neighbors_dist</span><br><span class="line">    return neighbors_dist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#   使用UserFC进行推荐</span><br><span class="line">#   输入：文件名,用户ID,邻居数量</span><br><span class="line">#   输出：推荐的电影ID,输入用户的电影列表,电影对应用户的反序表，邻居列表</span><br><span class="line">#</span><br><span class="line">def recommendByUserFC(file_name, userid, k=5):</span><br><span class="line">    # 读取文件数据</span><br><span class="line">    test_contents = readFile(file_name)</span><br><span class="line"></span><br><span class="line">    # 文件数据格式化成二维数组 List[[用户id,电影id,电影评分]...]</span><br><span class="line">    test_rates = getRatingInformation(test_contents)</span><br><span class="line"></span><br><span class="line">    # 格式化成字典数据</span><br><span class="line">    #    1.用户字典：dic[用户id]=[(电影id,电影评分)...]</span><br><span class="line">    #    2.电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">    test_user_dic, test_item_to_user = createUserRankDic(test_rates)</span><br><span class="line"></span><br><span class="line">    # 邻近用户列表：[(和指定用户的距离,用户id)...]</span><br><span class="line">    neighbors = calcNearestNeighbor(userid, test_user_dic, test_item_to_user)[:k]</span><br><span class="line"></span><br><span class="line">    # 推荐列表：&#123;&quot;电影id&quot;:&quot;累计推荐得分&quot;...&#125;</span><br><span class="line">    recommend_dic = &#123;&#125;</span><br><span class="line">    for neighbor in neighbors:</span><br><span class="line">        neighbor_user_id = neighbor[1]</span><br><span class="line">        movies = test_user_dic[neighbor_user_id]</span><br><span class="line">        for movie in movies:</span><br><span class="line">            if movie[0] not in recommend_dic:</span><br><span class="line">                recommend_dic[movie[0]] = neighbor[0]</span><br><span class="line">            else:</span><br><span class="line">                # 累计推荐得分</span><br><span class="line">                recommend_dic[movie[0]] += neighbor[0]</span><br><span class="line"></span><br><span class="line">    # 建立推荐列表：[(累计推荐得分,电影id)...]</span><br><span class="line">    recommend_list = []</span><br><span class="line">    for key in recommend_dic:</span><br><span class="line">        # print key</span><br><span class="line">        recommend_list.append([recommend_dic[key], key])</span><br><span class="line"></span><br><span class="line">    # 按得分排序</span><br><span class="line">    recommend_list.sort(reverse=True)</span><br><span class="line">    # 指定用户喜欢的电影列表</span><br><span class="line">    user_movies = [i[0] for i in test_user_dic[userid]]</span><br><span class="line"></span><br><span class="line">    return [i[1] for i in recommend_list], user_movies, test_item_to_user, neighbors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#   获取电影的列表，格式：电影id,电影名,电影发布时间</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">def getMoviesList(file_name):</span><br><span class="line">    # print sys.getdefaultencoding()</span><br><span class="line">    movies_contents = readFile(file_name)</span><br><span class="line">    movies_info = &#123;&#125;</span><br><span class="line">    for movie in movies_contents[1:]:</span><br><span class="line">        movie_info = movie.split(&quot;,&quot;)</span><br><span class="line">        movies_info[int(movie_info[0])] = movie_info[1:]</span><br><span class="line">    return movies_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 主程序</span><br><span class="line"># 输入 ： 测试数据集合</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    # reload(sys)</span><br><span class="line">    # sys.setdefaultencoding(&apos;utf-8&apos;)</span><br><span class="line">    movies = getMoviesList(&quot;E:\\data_mining\\recommend\\ml-latest-small\\movies.csv&quot;)</span><br><span class="line">    # 推荐电影列表：[&quot;电影id&quot;...]</span><br><span class="line">    # 指定用户喜欢的电影列表：[&quot;电影id&quot;...]</span><br><span class="line">    # 电影字典：dic[电影id]=[用户id1,用户id2...]</span><br><span class="line">    # 邻近用户列表：[(和指定用户的距离,用户id)...]</span><br><span class="line">    recommend_list, user_movie, items_movie, neighbors = recommendByUserFC(&quot;E:\\data_mining\\recommend\\ml-latest-small\\ratings.csv&quot;, 179, 80)</span><br><span class="line">    # 所有邻近的用户列表：[&quot;用户id&quot;...]</span><br><span class="line">    neighbors_id = [i[1] for i in neighbors]</span><br><span class="line">    table = Texttable()</span><br><span class="line">    table.set_deco(Texttable.HEADER)</span><br><span class="line">    # t: text</span><br><span class="line">    # f: float (decimal)</span><br><span class="line">    # e: float (exponent)</span><br><span class="line">    # i: integer</span><br><span class="line">    # a: automatic</span><br><span class="line">    table.set_cols_dtype([&apos;t&apos;, &apos;t&apos;, &apos;t&apos;])</span><br><span class="line">    # l: left</span><br><span class="line">    # r: right</span><br><span class="line">    # c: center</span><br><span class="line">    table.set_cols_align([&quot;l&quot;, &quot;l&quot;, &quot;l&quot;])</span><br><span class="line">    rows = []</span><br><span class="line">    rows.append([&quot;movie name&quot;, &quot;release&quot;, &quot;from userid&quot;])</span><br><span class="line">    # 前20推荐电影id</span><br><span class="line">    for movie_id in recommend_list[:20]:</span><br><span class="line">        from_user = []</span><br><span class="line">        # 喜欢该电影的所有用户id</span><br><span class="line">        for user_id in items_movie[movie_id]:</span><br><span class="line">            # 并且为邻近用户</span><br><span class="line">            if user_id in neighbors_id:</span><br><span class="line">                from_user.append(str(user_id))</span><br><span class="line">        # 取出电影的信息</span><br><span class="line">        rows.append([movies[movie_id][0], movies[movie_id][1], &apos;,&apos;.join(from_user)])</span><br><span class="line">    table.add_rows(rows)</span><br><span class="line">    print(table.draw())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;电影点赞数据：&lt;a href=&quot;https://grouplens.org/datasets/movielens/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://grouplens.org/datasets/movielens/&lt;/a&gt;&lt;b
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Funny Website</title>
    <link href="https://blog.fomeiherz.top/2018/07/04/Funny-Website/"/>
    <id>https://blog.fomeiherz.top/2018/07/04/Funny-Website/</id>
    <published>2018-07-04T04:04:06.000Z</published>
    <updated>2018-07-04T04:52:01.542Z</updated>
    
    <content type="html"><![CDATA[<p>Sentdex Blog: <a href="https://pythonprogramming.net/" target="_blank" rel="noopener">https://pythonprogramming.net/</a><br>Sentdex Youtube: <a href="https://www.youtube.com/user/sentdex/featured?pbjreload=10" target="_blank" rel="noopener">https://www.youtube.com/user/sentdex/featured?pbjreload=10</a></p><p>WSL(Windows Subsystem for Linux): <a href="https://chocolatey.org/" target="_blank" rel="noopener">https://chocolatey.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sentdex Blog: &lt;a href=&quot;https://pythonprogramming.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pythonprogramming.net/&lt;/a&gt;&lt;br&gt;Sentdex Youtu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JaccardSimilarity计算文本相似度</title>
    <link href="https://blog.fomeiherz.top/2018/07/03/JaccardSimilarity%E8%AE%A1%E7%AE%97%E6%96%87%E6%9C%AC%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
    <id>https://blog.fomeiherz.top/2018/07/03/JaccardSimilarity计算文本相似度/</id>
    <published>2018-07-02T16:05:12.000Z</published>
    <updated>2018-07-02T16:06:37.293Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"># refer to : https://github.com/wyh267/myCodeLib/blob/master/Src/textDiff/JaccardSimilarity.py</span><br><span class="line">#</span><br><span class="line"># 利用jaccard similarity 计算文本相似度</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import time</span><br><span class="line">import progressbar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 读取文件，保存到一个字符串中</span><br><span class="line"># 输入： 文件名完整路径</span><br><span class="line"># 输出： 文件内容</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def read_file(file_name):</span><br><span class="line">    f = open(file_name, &quot;r&quot;)</span><br><span class="line">    file_contents = f.read()</span><br><span class="line">    file_contents = file_contents.replace(&quot;\t&quot;, &quot;&quot;)</span><br><span class="line">    file_contents = file_contents.replace(&quot;\r&quot;, &quot;&quot;)</span><br><span class="line">    file_contents = file_contents.replace(&quot;\n&quot;, &quot;&quot;)</span><br><span class="line">    f.close()</span><br><span class="line">    return file_contents</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 分割字符串，使用k-shingle方式进行分割</span><br><span class="line"># 输入：字符串，k值</span><br><span class="line"># 输出：分割好的字符串，存入数组中</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def split_contents(content, k=5):</span><br><span class="line">    content_split = []</span><br><span class="line">    for i in range(len(content) - k):</span><br><span class="line">        content_split.append(content[i:i + k])</span><br><span class="line">    return content_split</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 将数据保存到hash表中，也就是某个集合</span><br><span class="line"># 输入：已经分隔好的数据</span><br><span class="line"># 输出：hash表</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def hash_contents_list(content_list):</span><br><span class="line">    hash_content = &#123;&#125;</span><br><span class="line">    for i in content_list:</span><br><span class="line">        if i in hash_content:</span><br><span class="line">            hash_content[i] = hash_content[i] + 1</span><br><span class="line">        else:</span><br><span class="line">            hash_content[i] = 1</span><br><span class="line">    return hash_content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 计算交集</span><br><span class="line"># 输入：两个hash表</span><br><span class="line"># 输出：交集的整数</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def calc_intersection(hash_a, hash_b):</span><br><span class="line">    intersection = 0</span><br><span class="line">    if (len(hash_a) &lt;= len(hash_b)):</span><br><span class="line">        hash_min = hash_a</span><br><span class="line">        hash_max = hash_b</span><br><span class="line">    else:</span><br><span class="line">        hash_min = hash_b</span><br><span class="line">        hash_max = hash_a</span><br><span class="line"></span><br><span class="line">    for key in hash_min:</span><br><span class="line">        if key in hash_max:</span><br><span class="line">            if (hash_min[key] &lt;= hash_max[key]):</span><br><span class="line">                intersection = intersection + hash_min[key]</span><br><span class="line">            else:</span><br><span class="line">                intersection = intersection + hash_max[key]</span><br><span class="line"></span><br><span class="line">    return intersection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 计算并集</span><br><span class="line"># 输入：两个hash表</span><br><span class="line"># 输出：并集的整数</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def calc_union_set(hash_a, hash_b, intersection):</span><br><span class="line">    union_set = 0</span><br><span class="line"></span><br><span class="line">    for key in hash_a:</span><br><span class="line">        union_set = union_set + hash_a[key]</span><br><span class="line">    for key in hash_b:</span><br><span class="line">        union_set = union_set + hash_b[key]</span><br><span class="line"></span><br><span class="line">    return union_set - intersection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 计算相似度</span><br><span class="line"># 输入：交集和并集</span><br><span class="line"># 输出：相似度</span><br><span class="line">#   </span><br><span class="line">#############################################</span><br><span class="line">def calc_similarity(intersection, union_set):</span><br><span class="line">    if (union_set &gt; 0):</span><br><span class="line">        return float(intersection) / float(union_set)</span><br><span class="line">    else:</span><br><span class="line">        return 0.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 从某个文本文件获取一个集合，该集合保存了文本中单词的出现频率</span><br><span class="line"># 输入：文件名，k值,默认为5</span><br><span class="line"># 输出：一个词频的hash表</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def get_hash_info_from_file(file_name, k=5):</span><br><span class="line">    content = read_file(file_name)</span><br><span class="line">    content_list = split_contents(content, k)</span><br><span class="line">    hash_content = hash_contents_list(content_list)</span><br><span class="line">    return hash_content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 获取文件列表</span><br><span class="line"># 输入：目录名</span><br><span class="line"># 输出：文件列表，文件名列表</span><br><span class="line">#</span><br><span class="line">############################################# </span><br><span class="line">def collect_file_list(file_path):</span><br><span class="line">    print(&quot;获取文件列表....&quot;)</span><br><span class="line">    start = time.time()</span><br><span class="line">    file_name_list = []</span><br><span class="line">    file_names = []</span><br><span class="line">    for parent, dirnames, filenames in os.walk(file_path):</span><br><span class="line">        # print filenames</span><br><span class="line">        for file_name in filenames:</span><br><span class="line">            if (file_name[-4:] == &quot;.txt&quot;):</span><br><span class="line">                file_name_list.append(file_path + file_name)</span><br><span class="line">                file_names.append(file_name)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&quot;获取文件列表结束，用时: &quot; + str(end - start) + u&quot;秒&quot;)</span><br><span class="line">    return file_name_list, file_names</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 获取每个文件词汇</span><br><span class="line"># 输入：文件列表</span><br><span class="line"># 输出：词汇表列表</span><br><span class="line">#</span><br><span class="line">############################################# </span><br><span class="line">def get_all_files_words_list(file_name_list, file_names, k=5):</span><br><span class="line">    print(&quot;获取每个文本的词汇词频表....&quot;)</span><br><span class="line">    start = time.time()</span><br><span class="line">    hash_contents = []</span><br><span class="line">    all = float(len(file_name_list))</span><br><span class="line">    pos = 0.0</span><br><span class="line">    pro = progressbar.ProgressBar().start()</span><br><span class="line">    # 获取每个文本的词汇词频表</span><br><span class="line">    for index, file_name in enumerate(file_name_list):</span><br><span class="line">        pos = pos + 1</span><br><span class="line">        rate_num = int(pos / all * 100)</span><br><span class="line">        pro.update(rate_num)</span><br><span class="line">        # time.sleep(0.1)</span><br><span class="line">        hash_contents.append([get_hash_info_from_file(file_name, k), file_names[index]])</span><br><span class="line"></span><br><span class="line">    pro.finish()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&quot;获取每个文本的词汇词频表结束，用时: &quot; + str(end - start) + u&quot;秒&quot;)</span><br><span class="line">    return hash_contents</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 计算两两相似度</span><br><span class="line"># 输入：哈希数据列表</span><br><span class="line"># 输出：相似度数组</span><br><span class="line">#</span><br><span class="line">############################################# </span><br><span class="line">def calc_each_similar(hash_contents):</span><br><span class="line">    print(&quot;计算所有文本互相之间的相似度....&quot;)</span><br><span class="line">    start = time.time()</span><br><span class="line">    similar_list = []</span><br><span class="line">    all = float(len(hash_contents))</span><br><span class="line">    pos = 0.0</span><br><span class="line">    pro = progressbar.ProgressBar().start()</span><br><span class="line">    for index1, v1 in enumerate(hash_contents):</span><br><span class="line">        pos = pos + 1</span><br><span class="line">        rate_num = int(pos / all * 100)</span><br><span class="line">        pro.update(rate_num)</span><br><span class="line">        # time.sleep(0.1)</span><br><span class="line">        # print &quot;%02d&quot; % int(pos/all*100),</span><br><span class="line">        for index2, v2 in enumerate(hash_contents):</span><br><span class="line">            if (v1[1] != v2[1] and index2 &gt; index1):</span><br><span class="line">                intersection = calc_intersection(v1[0], v2[0])  # 计算交集</span><br><span class="line">                union_set = calc_union_set(v1[0], v2[0], intersection)  # 计算并集</span><br><span class="line">                similar = calc_similarity(intersection, union_set)</span><br><span class="line">                similar_list.append([similar, v1[1], v2[1]])</span><br><span class="line">                # print v1[1]+ &quot;||||||&quot; + v2[1] + &quot; similarity is : &quot; + str(calcSimilarity(intersection,union_set)) #计算相似度</span><br><span class="line">    pro.finish()</span><br><span class="line">    similar_list.sort()</span><br><span class="line">    similar_list.reverse()</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(&quot;计算所有文本互相之间的相似度结束，用时: &quot; + str(end - start) + u&quot;秒&quot;)</span><br><span class="line">    return similar_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#############################################</span><br><span class="line">#</span><br><span class="line"># 主程序</span><br><span class="line"># 输入:路径和k-shingle中的k值</span><br><span class="line"># 输出:两两相似度数组</span><br><span class="line">#</span><br><span class="line">#############################################</span><br><span class="line">def calc_similarity_by_words(file_path, k=5):</span><br><span class="line">    # 获取文件列表</span><br><span class="line">    file_name_list, file_names = collect_file_list(file_path)</span><br><span class="line">    # 获取每个文件词汇</span><br><span class="line">    hash_contents = get_all_files_words_list(file_name_list, file_names, k)</span><br><span class="line">    # 计算文件的相似度</span><br><span class="line">    res = calc_each_similar(hash_contents)</span><br><span class="line">    return res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(calc_similarity_by_words(&quot;G:\\temp\\&quot;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>个人文档记录</title>
    <link href="https://blog.fomeiherz.top/2018/05/24/%E4%B8%AA%E4%BA%BA%E6%96%87%E6%A1%A3%E8%AE%B0%E5%BD%95/"/>
    <id>https://blog.fomeiherz.top/2018/05/24/个人文档记录/</id>
    <published>2018-05-24T01:48:29.000Z</published>
    <updated>2018-05-25T04:11:56.592Z</updated>
    
    <content type="html"><![CDATA[<h5 id="RAP返回信息模板"><a href="#RAP返回信息模板" class="headerlink" title="RAP返回信息模板"></a>RAP返回信息模板</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;ret&quot;:&quot;&quot;,&quot;msg&quot;:&quot;&quot;,&quot;data&quot;:&#123;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="Windows-10-hosts文件位置"><a href="#Windows-10-hosts文件位置" class="headerlink" title="Windows 10 hosts文件位置"></a>Windows 10 hosts文件位置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\Drivers\etc\hosts</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;RAP返回信息模板&quot;&gt;&lt;a href=&quot;#RAP返回信息模板&quot; class=&quot;headerlink&quot; title=&quot;RAP返回信息模板&quot;&gt;&lt;/a&gt;RAP返回信息模板&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CopyOnWriteArrayList的原理和方法</title>
    <link href="https://blog.fomeiherz.top/2018/05/16/CopyOnWriteArrayList%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.fomeiherz.top/2018/05/16/CopyOnWriteArrayList的原理和方法/</id>
    <published>2018-05-16T00:48:32.000Z</published>
    <updated>2018-05-16T00:59:48.157Z</updated>
    
    <content type="html"><![CDATA[<h4 id="对比遍历有更新操作"><a href="#对比遍历有更新操作" class="headerlink" title="对比遍历有更新操作"></a>对比遍历有更新操作</h4><h5 id="ArrayList普通数组"><a href="#ArrayList普通数组" class="headerlink" title="ArrayList普通数组"></a>ArrayList普通数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CopyOnWriteArrayListTest &#123;</span><br><span class="line"></span><br><span class="line">    static List&lt;Integer&gt; list = new ArrayList()&#123;&#123;add(20);add(30);add(40);&#125;&#125;;</span><br><span class="line">    static class Thread1 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            Iterator iterator = list.iterator();</span><br><span class="line">            System.out.print(&quot;1 : &quot;);</span><br><span class="line">            // 仅仅打印数组的第一个元素</span><br><span class="line">            if (iterator.hasNext()) &#123;</span><br><span class="line">                System.out.print(iterator.next() + &quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            try &#123;</span><br><span class="line">                sleep(2000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            // 打印数组剩下的元素</span><br><span class="line">            System.out.print(&quot;2 : &quot;);</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                System.out.print(iterator.next() + &quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Thread2 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            list.add(50);</span><br><span class="line">            System.out.println(&quot;2 : &quot; + list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread1().start();</span><br><span class="line">        new Thread2().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果抛出异常信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;Thread-0&quot; 2 : java.util.ConcurrentModificationException</span><br><span class="line">       at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:901)</span><br><span class="line">       at java.util.ArrayList$Itr.next(ArrayList.java:851)</span><br><span class="line">       at cn.com.xbed.csbapp.service.impl.CopyOnWriteArrayListTest$Thread1.run(CopyOnWriteArrayListTest.java:29)</span><br></pre></td></tr></table></figure></p><h5 id="CopyOnWriteArrayList复制写入数组"><a href="#CopyOnWriteArrayList复制写入数组" class="headerlink" title="CopyOnWriteArrayList复制写入数组"></a>CopyOnWriteArrayList复制写入数组</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line">public class CopyOnWriteArrayListTest &#123;</span><br><span class="line"></span><br><span class="line">    static Integer[] os = new Integer[]&#123;20, 30, 40&#125;;</span><br><span class="line">    static CopyOnWriteArrayList&lt;Integer&gt; list = new CopyOnWriteArrayList(os);</span><br><span class="line">    static class Thread1 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            Iterator iterator = list.iterator();</span><br><span class="line">            System.out.print(&quot;1 : &quot;);</span><br><span class="line">            // 仅仅打印数组的第一个元素</span><br><span class="line">            if (iterator.hasNext()) &#123;</span><br><span class="line">                System.out.print(iterator.next() + &quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            try &#123;</span><br><span class="line">                sleep(2000);</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            // 打印数组剩下的元素</span><br><span class="line">            // 还是初始拿到的数组，更新后的数组不会在这里</span><br><span class="line">            System.out.print(&quot;2 : &quot;);</span><br><span class="line">            while (iterator.hasNext()) &#123;</span><br><span class="line">                System.out.print(iterator.next() + &quot;  &quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static class Thread2 extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            // 复制新数组，再写入，不会影响已遍历的</span><br><span class="line">            list.add(50);</span><br><span class="line">            System.out.println(&quot;2 : &quot; + list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Thread1().start();</span><br><span class="line">        new Thread2().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;对比遍历有更新操作&quot;&gt;&lt;a href=&quot;#对比遍历有更新操作&quot; class=&quot;headerlink&quot; title=&quot;对比遍历有更新操作&quot;&gt;&lt;/a&gt;对比遍历有更新操作&lt;/h4&gt;&lt;h5 id=&quot;ArrayList普通数组&quot;&gt;&lt;a href=&quot;#ArrayList普通数
      
    
    </summary>
    
    
      <category term="高并发" scheme="https://blog.fomeiherz.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
      <category term="Java" scheme="https://blog.fomeiherz.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>各种排序算法比较</title>
    <link href="https://blog.fomeiherz.top/2018/05/11/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>https://blog.fomeiherz.top/2018/05/11/各种排序算法比较/</id>
    <published>2018-05-11T07:42:48.000Z</published>
    <updated>2018-05-11T07:47:36.640Z</updated>
    
    <content type="html"><![CDATA[<h4 id="各种排序算法比较"><a href="#各种排序算法比较" class="headerlink" title="各种排序算法比较"></a>各种排序算法比较</h4><p><img src="http://p7240jy2w.bkt.clouddn.com/%E5%90%84%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%8320180510.png" alt="avata"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;各种排序算法比较&quot;&gt;&lt;a href=&quot;#各种排序算法比较&quot; class=&quot;headerlink&quot; title=&quot;各种排序算法比较&quot;&gt;&lt;/a&gt;各种排序算法比较&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://p7240jy2w.bkt.clouddn.com/%E5
      
    
    </summary>
    
    
      <category term="排序" scheme="https://blog.fomeiherz.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>C语言读写文件详解</title>
    <link href="https://blog.fomeiherz.top/2018/05/11/C%E8%AF%AD%E8%A8%80%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.fomeiherz.top/2018/05/11/C语言读写文件详解/</id>
    <published>2018-05-11T07:11:02.000Z</published>
    <updated>2018-05-11T07:11:49.315Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    // 写入模式</span><br><span class="line">    FILE* writer = fopen(&quot;C:\\data.txt&quot;, &quot;w&quot;);</span><br><span class="line">    if (writer == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fprintf(writer, &quot;%d &quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(writer);</span><br><span class="line"></span><br><span class="line">    // 读入模式</span><br><span class="line">    FILE* reader = fopen(&quot;C:\\data.txt&quot;, &quot;r&quot;);</span><br><span class="line">    if (reader == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    int nums[10] = &#123;0&#125;;</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fscanf(reader, &quot;%d &quot;, &amp;nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    // 打印保存的值</span><br><span class="line">    for (int i = 0; i &lt; 10; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;, i);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(reader);</span><br><span class="line"></span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="C语言" scheme="https://blog.fomeiherz.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="文件读写" scheme="https://blog.fomeiherz.top/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>C++文件读写详解</title>
    <link href="https://blog.fomeiherz.top/2018/05/11/cplusplus%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E8%AF%A6%E8%A7%A3/"/>
    <id>https://blog.fomeiherz.top/2018/05/11/cplusplus文件读写详解/</id>
    <published>2018-05-11T06:29:12.000Z</published>
    <updated>2018-05-11T06:48:51.177Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">// 文件流包</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">// 读取一行需要存在字符串中</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">// ifstream是在名称空间std下的，必须引入这个包</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ifstream ifs(&quot;C:\\test.txt&quot;);</span><br><span class="line">    ofstream ofs(&quot;C:\\test1.txt&quot;);</span><br><span class="line">    string s;</span><br><span class="line"></span><br><span class="line">    // 读写一行数据，直到读写内容为空</span><br><span class="line">    while (getline(ifs, s) != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        // 写入到文件</span><br><span class="line">        ofs &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ofs.flush();</span><br><span class="line">    ofs.close();</span><br><span class="line"></span><br><span class="line">    ifs.close();</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="C++" scheme="https://blog.fomeiherz.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>队列的链式存储结构</title>
    <link href="https://blog.fomeiherz.top/2018/05/10/%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://blog.fomeiherz.top/2018/05/10/队列的链式存储结构/</id>
    <published>2018-05-10T11:01:56.000Z</published>
    <updated>2018-05-10T11:03:45.744Z</updated>
    
    <content type="html"><![CDATA[<h4 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">// 队头出队；队尾入队</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define OK 1</span><br><span class="line">#define OVERFLOW -2</span><br><span class="line">#define ERROR -1</span><br><span class="line"></span><br><span class="line">typedef int Status;</span><br><span class="line">typedef char QElemType;</span><br><span class="line"></span><br><span class="line">// 队列结点</span><br><span class="line">typedef struct QNode</span><br><span class="line">&#123;</span><br><span class="line">    QElemType data;</span><br><span class="line">    struct QNode *next;</span><br><span class="line">&#125; QNode, *QNodePtr;</span><br><span class="line"></span><br><span class="line">// 链式队列</span><br><span class="line">typedef struct </span><br><span class="line">&#123;</span><br><span class="line">    QNodePtr front;</span><br><span class="line">    QNodePtr rear;</span><br><span class="line">&#125; LinkQueue;</span><br><span class="line"></span><br><span class="line">// 初始化队列</span><br><span class="line">Status InitQueue(LinkQueue *L)</span><br><span class="line">&#123;</span><br><span class="line">    // 创建头结点</span><br><span class="line">    QNode *head = (QNodePtr)malloc(sizeof(QNode));</span><br><span class="line">    if (head == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        return OVERFLOW;</span><br><span class="line">    &#125;</span><br><span class="line">    head-&gt;data = &apos; &apos;;</span><br><span class="line">    head-&gt;next = NULL;</span><br><span class="line">    // 同时指向头结点</span><br><span class="line">    L-&gt;front = L-&gt;rear = head;</span><br><span class="line"></span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 入队</span><br><span class="line">Status EnQueue(LinkQueue *L, QElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    // 创建结点</span><br><span class="line">    QNode* node = (QNodePtr)malloc(sizeof(QNode));</span><br><span class="line">    if (!node) </span><br><span class="line">    &#123;</span><br><span class="line">        return OVERFLOW;</span><br><span class="line">    &#125;</span><br><span class="line">    node-&gt;data = e;</span><br><span class="line">    node-&gt;next = NULL;</span><br><span class="line"></span><br><span class="line">    // 尾指针指向该节点</span><br><span class="line">    L-&gt;rear-&gt;next = node;</span><br><span class="line">    L-&gt;rear = node;</span><br><span class="line">    </span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 出队</span><br><span class="line">Status DeQueue(LinkQueue *L, QElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    // 判空</span><br><span class="line">    if (L-&gt;front == L-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        return ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    QNode* p = L-&gt;front-&gt;next;</span><br><span class="line">    // 保存元素</span><br><span class="line">    (*e) = p-&gt;data;</span><br><span class="line">    // 删除元素</span><br><span class="line">    L-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">    if (L-&gt;rear == p)</span><br><span class="line">    &#123;</span><br><span class="line">        L-&gt;rear = L-&gt;front;</span><br><span class="line">    &#125;</span><br><span class="line">    free(p);</span><br><span class="line"></span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Traverse(LinkQueue L)</span><br><span class="line">&#123;</span><br><span class="line">    QNode* p = L.front-&gt;next;</span><br><span class="line">    // 跳过头结点</span><br><span class="line">    while (p != NULL) </span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c &quot;, p-&gt;data);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LinkQueue L;</span><br><span class="line">    InitQueue(&amp;L);</span><br><span class="line"></span><br><span class="line">    EnQueue(&amp;L, &apos;X&apos;);</span><br><span class="line">    EnQueue(&amp;L, &apos;Y&apos;);</span><br><span class="line"></span><br><span class="line">    QElemType a;</span><br><span class="line">    DeQueue(&amp;L, &amp;a);</span><br><span class="line"></span><br><span class="line">    Traverse(L);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;算法实现&quot;&gt;&lt;a href=&quot;#算法实现&quot; class=&quot;headerlink&quot; title=&quot;算法实现&quot;&gt;&lt;/a&gt;算法实现&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="C语言" scheme="https://blog.fomeiherz.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="https://blog.fomeiherz.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>关于高并发下的系统设计要点</title>
    <link href="https://blog.fomeiherz.top/2018/05/07/%E5%85%B3%E4%BA%8E%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E8%A6%81%E7%82%B9/"/>
    <id>https://blog.fomeiherz.top/2018/05/07/关于高并发下的系统设计要点/</id>
    <published>2018-05-06T16:02:36.000Z</published>
    <updated>2018-05-06T16:12:13.218Z</updated>
    
    <content type="html"><![CDATA[<ol><li>对数据库更新操作。应该按条件查询数据，取出主键，按主键去更新数据。防止update操作进行全表锁定，影响了其他业务。  </li><li>对已经使用了update操作的语句，尽可能给update的查询条件都加上索引，这样在更新时就不会全表锁住了。  </li><li>通过redis实现锁的功能。比如通过redis锁定一张卡券，防止一张卡券被重复使用。  </li><li>通过并发关键字synchronized保证线程的安全。  </li><li>SimpleDateFormat对象为线程不安全的，所以不能静态new对象，应该是各个方法各自new该对象，不能静态共享。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;对数据库更新操作。应该按条件查询数据，取出主键，按主键去更新数据。防止update操作进行全表锁定，影响了其他业务。  &lt;/li&gt;
&lt;li&gt;对已经使用了update操作的语句，尽可能给update的查询条件都加上索引，这样在更新时就不会全表锁住了。  &lt;/li&gt;
      
    
    </summary>
    
    
      <category term="高并发" scheme="https://blog.fomeiherz.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>关于系统重构的步骤梳理</title>
    <link href="https://blog.fomeiherz.top/2018/05/06/%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E9%87%8D%E6%9E%84%E7%9A%84%E6%AD%A5%E9%AA%A4%E6%A2%B3%E7%90%86/"/>
    <id>https://blog.fomeiherz.top/2018/05/06/关于系统重构的步骤梳理/</id>
    <published>2018-05-06T15:22:39.000Z</published>
    <updated>2018-05-06T15:54:43.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重构步骤"><a href="#重构步骤" class="headerlink" title="重构步骤"></a>重构步骤</h2><ul><li>删除废弃的接口</li><li>业务功能的简单化和清晰化</li><li>删除数据库废弃的字段</li></ul><h2 id="由影响范围小到影响范围大的方向逐个进行重构"><a href="#由影响范围小到影响范围大的方向逐个进行重构" class="headerlink" title="由影响范围小到影响范围大的方向逐个进行重构"></a>由影响范围小到影响范围大的方向逐个进行重构</h2><p>比如先对某个功能进行重构，然后再对表结构进行更改。</p><h2 id="统计该重构涉及的所有接口和业务功能"><a href="#统计该重构涉及的所有接口和业务功能" class="headerlink" title="统计该重构涉及的所有接口和业务功能"></a>统计该重构涉及的所有接口和业务功能</h2><p>包括调用和被调用之间的所有接口。</p><h2 id="针对该重构的功能写测试案例"><a href="#针对该重构的功能写测试案例" class="headerlink" title="针对该重构的功能写测试案例"></a>针对该重构的功能写测试案例</h2><p>1、对该重构涉及的所有的接口，写对应的测试案例，理论上应该覆盖所有被影响的接口。<br>2、对该重构涉及的所有业务功能，写对应的测试案例。</p><h2 id="从底层系统向上层系统逐一重构"><a href="#从底层系统向上层系统逐一重构" class="headerlink" title="从底层系统向上层系统逐一重构"></a>从底层系统向上层系统逐一重构</h2><p>系统有调用和被调用之间的关系，应该先重构被调用的系统，然后再重构调用系统。并且每重构完一个接口，应该有对应的单元测试覆盖该接口，测试通过后，再重构下一个接口。</p><h2 id="所有业务功能的测试"><a href="#所有业务功能的测试" class="headerlink" title="所有业务功能的测试"></a>所有业务功能的测试</h2><p>系统接口层测试全部完毕后，对业务功能进行整体的测试。</p><h2 id="推送到测试环境"><a href="#推送到测试环境" class="headerlink" title="推送到测试环境"></a>推送到测试环境</h2><p>推送到测试环境，给测试人员进行测试。<br>为了确保重构的可靠性，应该在测试环境跑2个星期没问题后，再推上生产。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重构步骤&quot;&gt;&lt;a href=&quot;#重构步骤&quot; class=&quot;headerlink&quot; title=&quot;重构步骤&quot;&gt;&lt;/a&gt;重构步骤&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;删除废弃的接口&lt;/li&gt;
&lt;li&gt;业务功能的简单化和清晰化&lt;/li&gt;
&lt;li&gt;删除数据库废弃的字段&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="系统重构" scheme="https://blog.fomeiherz.top/tags/%E7%B3%BB%E7%BB%9F%E9%87%8D%E6%9E%84/"/>
    
      <category term="Refactoring" scheme="https://blog.fomeiherz.top/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客添加站内搜索页</title>
    <link href="https://blog.fomeiherz.top/2018/05/04/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2%E9%A1%B5/"/>
    <id>https://blog.fomeiherz.top/2018/05/04/Hexo博客添加站内搜索页/</id>
    <published>2018-05-04T02:08:22.000Z</published>
    <updated>2018-05-04T02:27:31.364Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h4><p>在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></p><h4 id="安装-hexo-generator-searchdb"><a href="#安装-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-searchdb"></a>安装 hexo-generator-searchdb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在 blog/source 目录下会有一个新生成search.xml文件。</p><h4 id="创建搜索页面"><a href="#创建搜索页面" class="headerlink" title="创建搜索页面"></a>创建搜索页面</h4><p>在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;search&quot;</span><br></pre></td></tr></table></figure></p><p>在 blog/source 下会新生成一个新的文件夹search，在该文件夹下会有一个index.md文件。</p><blockquote><p>注意：修改该文件，在文章倒数第2行插入一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;search&quot;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h4><p>修改blog下的_config.yml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search：</span><br><span class="line">    path: search.xml</span><br><span class="line">    field: post</span><br><span class="line">    format: html</span><br><span class="line">    limit: 10000</span><br></pre></td></tr></table></figure></p><h4 id="修改-blog-themes-xxx-下的-config-yml文件"><a href="#修改-blog-themes-xxx-下的-config-yml文件" class="headerlink" title="修改 /blog/themes/xxx 下的_config.yml文件"></a>修改 /blog/themes/xxx 下的_config.yml文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><h4 id="重新部署，启动"><a href="#重新部署，启动" class="headerlink" title="重新部署，启动"></a>重新部署，启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean; hexo g; hexo s;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装-hexo-generator-search&quot;&gt;&lt;a href=&quot;#安装-hexo-generator-search&quot; class=&quot;headerlink&quot; title=&quot;安装 hexo-generator-search&quot;&gt;&lt;/a&gt;安装 hexo-genera
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Cloud 整体架构设计介绍</title>
    <link href="https://blog.fomeiherz.top/2018/05/03/spring-cloud-start/"/>
    <id>https://blog.fomeiherz.top/2018/05/03/spring-cloud-start/</id>
    <published>2018-05-03T05:57:04.000Z</published>
    <updated>2018-05-11T06:50:14.280Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud 包含组件：Eureka、Ribbon、Hystrix、Zuul、Spring-Cloud-Config</p><p>Spring Cloud 微服务架构图，如下图所示。<br><img src="http://p7240jy2w.bkt.clouddn.com/SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%80%BB%E5%9B%BE.jpg" alt="avata"></p><h4 id="Eureka服务注册与发现"><a href="#Eureka服务注册与发现" class="headerlink" title="Eureka服务注册与发现"></a>Eureka服务注册与发现</h4><p>注册中心。</p><h4 id="Ribbon服务调用端负载均衡"><a href="#Ribbon服务调用端负载均衡" class="headerlink" title="Ribbon服务调用端负载均衡"></a>Ribbon服务调用端负载均衡</h4><p>负责负载均衡的计算。</p><h4 id="Hystrix服务调用端熔断"><a href="#Hystrix服务调用端熔断" class="headerlink" title="Hystrix服务调用端熔断"></a>Hystrix服务调用端熔断</h4><p>Hystrix熔断机制，每一个微服务都有熔断处理。</p><h4 id="Zuul代理机制"><a href="#Zuul代理机制" class="headerlink" title="Zuul代理机制"></a>Zuul代理机制</h4><p>路由规则（路径映射），对名称进行隐藏。</p><h4 id="Spring-Cloud-Config服务配置组件"><a href="#Spring-Cloud-Config服务配置组件" class="headerlink" title="Spring Cloud Config服务配置组件"></a>Spring Cloud Config服务配置组件</h4><p>基于git进行配置的管理。</p><h4 id="Zipkin链路跟踪工具"><a href="#Zipkin链路跟踪工具" class="headerlink" title="Zipkin链路跟踪工具"></a>Zipkin链路跟踪工具</h4><p>作用是监控微服务集群中调用链路的通畅情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Cloud 包含组件：Eureka、Ribbon、Hystrix、Zuul、Spring-Cloud-Config&lt;/p&gt;
&lt;p&gt;Spring Cloud 微服务架构图，如下图所示。&lt;br&gt;&lt;img src=&quot;http://p7240jy2w.bkt.clou
      
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="https://blog.fomeiherz.top/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Lucene全文检索工具</title>
    <link href="https://blog.fomeiherz.top/2018/05/03/Lucene%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%B7%A5%E5%85%B7/"/>
    <id>https://blog.fomeiherz.top/2018/05/03/Lucene全文检索工具/</id>
    <published>2018-05-03T02:22:51.000Z</published>
    <updated>2018-05-03T02:39:41.984Z</updated>
    
    <content type="html"><![CDATA[<p>Lucene是基于Java的全文信息检索工具包。</p><h2 id="索引创建与检索"><a href="#索引创建与检索" class="headerlink" title="索引创建与检索"></a>索引创建与检索</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><ul><li>需要检索的数据(Document)</li><li>分词技术(Analyzer)</li><li>索引创建(Indexer)</li></ul><h3 id="索引检索"><a href="#索引检索" class="headerlink" title="索引检索"></a>索引检索</h3><ul><li>搜索关键词(keywords)</li><li>分词技术 (Analyzer)</li><li>检索索引(Search)</li><li>返回结果</li></ul><h2 id="Lucene文件结构"><a href="#Lucene文件结构" class="headerlink" title="Lucene文件结构"></a>Lucene文件结构</h2><ul><li>索引(Index)：一个索引放在一个文件夹中。</li><li>段(Segment)：一个索引中可以有很多段，段与段之间是独立的，添加新的文档可以产生新段，不同的段可以合并成一个新段。</li><li>文档(Document)：文档是创建索引的基本单位，不同的文档保存在不同的段中，一个段可以包含多个文档。</li><li>域(Field)：一个文档包含不同类型的信息，可以拆分开索引。</li><li>词(Term)：词是索引的最小单位，是经过词法分析和语言处理后的数据。</li></ul><p>正向信息就是按层次保存了索引一直到词的包含关系：索引 &gt; 段 &gt; 文档 &gt; 域 &gt; 词<br>反向信息：词 &gt; 文档</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Lucene索引查看工具：Luke</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lucene是基于Java的全文信息检索工具包。&lt;/p&gt;
&lt;h2 id=&quot;索引创建与检索&quot;&gt;&lt;a href=&quot;#索引创建与检索&quot; class=&quot;headerlink&quot; title=&quot;索引创建与检索&quot;&gt;&lt;/a&gt;索引创建与检索&lt;/h2&gt;&lt;h3 id=&quot;创建索引&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="全文检索" scheme="https://blog.fomeiherz.top/tags/%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2/"/>
    
      <category term="lucene" scheme="https://blog.fomeiherz.top/tags/lucene/"/>
    
  </entry>
  
  <entry>
    <title>栈</title>
    <link href="https://blog.fomeiherz.top/2018/05/02/%E6%A0%88/"/>
    <id>https://blog.fomeiherz.top/2018/05/02/栈/</id>
    <published>2018-05-02T09:19:04.000Z</published>
    <updated>2018-05-10T04:07:53.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h3><p>InitStack(*S)<br>操作步骤：申请空间，底部和顶部指针都指向该空间</p><p>IsFull(S)<br>操作步骤：(栈顶指针-栈底指针) &gt;= 申请的长度</p><p>Push(*S,e)<br>操作步骤：判满（//如果满了。重新申请空间；修改顶部指针；修改size长度）；栈顶插入e；栈顶++</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define INIT_SIZE 10</span><br><span class="line">#define INCREAME 10</span><br><span class="line"></span><br><span class="line">typedef char SElemType;</span><br><span class="line"></span><br><span class="line">// 存储结构</span><br><span class="line">typedef struct Stack</span><br><span class="line">&#123;</span><br><span class="line">    char* base; // 底部指针</span><br><span class="line">    char* top; // 顶部指针</span><br><span class="line">    int size; // 申请的长度</span><br><span class="line">&#125; Stack;</span><br><span class="line"></span><br><span class="line">// 初始化栈</span><br><span class="line">int InitStack(Stack *S)</span><br><span class="line">&#123;</span><br><span class="line">    S-&gt;base = S-&gt;top = (SElemType *)malloc(sizeof(SElemType) * INIT_SIZE);</span><br><span class="line">    if (!S-&gt;base)</span><br><span class="line">    &#123;</span><br><span class="line">        return -2;</span><br><span class="line">    &#125;</span><br><span class="line">    S-&gt;size = INIT_SIZE;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 插入元素</span><br><span class="line">int Push(Stack *S, SElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    int length = (S-&gt;top - S-&gt;base) / sizeof(SElemType);</span><br><span class="line">    SElemType * p;</span><br><span class="line">    if (length &gt;= S-&gt;size)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (SElemType *)realloc(S-&gt;base, sizeof(SElemType) * (S-&gt;size + INCREAME));</span><br><span class="line">        if (!p)</span><br><span class="line">        &#123;</span><br><span class="line">            return -2;</span><br><span class="line">        &#125;</span><br><span class="line">        S-&gt;base = p;</span><br><span class="line">        S-&gt;top = S-&gt;base + S-&gt;size; // 修改顶部指针指向新的位置</span><br><span class="line">        S-&gt;size += INCREAME;</span><br><span class="line">    &#125;</span><br><span class="line">    *(S-&gt;top) = e;</span><br><span class="line">    (S-&gt;top)++;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 打印</span><br><span class="line">// 直接传值，不会改变S</span><br><span class="line">void Print(Stack S)</span><br><span class="line">&#123;</span><br><span class="line">    while (S.base &lt;= S.top)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, *(S.base));</span><br><span class="line">        S.base++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Stack S;</span><br><span class="line">    InitStack(&amp;S);</span><br><span class="line"></span><br><span class="line">    Push(&amp;S, &apos;1&apos;);</span><br><span class="line">    Push(&amp;S, &apos;2&apos;);</span><br><span class="line">    Push(&amp;S, &apos;3&apos;);</span><br><span class="line">    Push(&amp;S, &apos;4&apos;);</span><br><span class="line">    Push(&amp;S, &apos;5&apos;);</span><br><span class="line">    Push(&amp;S, &apos;6&apos;);</span><br><span class="line">    Push(&amp;S, &apos;7&apos;);</span><br><span class="line">    Push(&amp;S, &apos;8&apos;);</span><br><span class="line">    Push(&amp;S, &apos;9&apos;);</span><br><span class="line">    Push(&amp;S, &apos;0&apos;);</span><br><span class="line">    Push(&amp;S, &apos;A&apos;);</span><br><span class="line"></span><br><span class="line">    Print(S);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;算法描述&quot;&gt;&lt;a href=&quot;#算法描述&quot; class=&quot;headerlink&quot; title=&quot;算法描述&quot;&gt;&lt;/a&gt;算法描述&lt;/h3&gt;&lt;p&gt;InitStack(*S)&lt;br&gt;操作步骤：申请空间，底部和顶部指针都指向该空间&lt;/p&gt;
&lt;p&gt;IsFull(S)&lt;br&gt;操
      
    
    </summary>
    
    
      <category term="C语言" scheme="https://blog.fomeiherz.top/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="数据结构" scheme="https://blog.fomeiherz.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL语法示例</title>
    <link href="https://blog.fomeiherz.top/2018/05/02/T-SQL%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/"/>
    <id>https://blog.fomeiherz.top/2018/05/02/T-SQL语法示例/</id>
    <published>2018-05-02T08:26:14.000Z</published>
    <updated>2018-05-02T08:35:27.053Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;begin&gt;</span><br><span class="line">--创建数据库</span><br><span class="line">use master --使用SQL原有模板master进行创建</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">--创建一个名为yy_db的数据库，数据库命名最好添加_db</span><br><span class="line">create database yy_db </span><br><span class="line">--数据文件的具体描述</span><br><span class="line">on primary (</span><br><span class="line">    name=&apos;yy_db.mdf&apos;, --创建主文件名字，名字要与数据库名字一样</span><br><span class="line">    filename=&apos;D:\Twins\Database\File\yy_db.mdf&apos;, --保存路径</span><br><span class="line">    size=3MB, --初始文件大小</span><br><span class="line">    --maxsize=60MB,最大限制</span><br><span class="line">    filegrowth=1MB --空间不足时，自动增长</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">--日志文件的具体描述</span><br><span class="line">log on (</span><br><span class="line">    name=&apos;yy_db.ldf&apos;, --创建日志文件名字</span><br><span class="line">    filename=&apos;D:\Twins\Database\File\yy_db.ldf&apos;, --保存路径</span><br><span class="line">    size=1MB, --初始文件大小</span><br><span class="line">    filegrowth=10% --空间不足，自动增长</span><br><span class="line">)</span><br><span class="line">&lt;end&gt;</span><br></pre></td></tr></table></figure><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">--指定插入表格的数据库</span><br><span class="line">use yy_db</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">--创建一个表格，表格名字应该带有_tb后缀</span><br><span class="line">create table info_tb(</span><br><span class="line">    --创建一个标识列和主键</span><br><span class="line">    Id int not null</span><br><span class="line">    identity(1,1)</span><br><span class="line">    constraint pk_info</span><br><span class="line">    primary key,</span><br><span class="line">    --创建一个唯一键，学生名字</span><br><span class="line">    Name nvarchar(20) not null</span><br><span class="line">        --属于约束之一，应该起个名字</span><br><span class="line">    constraint un_info </span><br><span class="line">    unique,  --唯一单词unique</span><br><span class="line">    --创建一个地址栏，默认是&quot;广州&quot;，允许为空</span><br><span class="line">    Address nvarchar(30) null</span><br><span class="line">        --属于默认约束，应该命名</span><br><span class="line">    constraint df_Address</span><br><span class="line">    default &apos;广州&apos;,</span><br><span class="line">    --创建一个Email邮箱的，允许为空</span><br><span class="line">    Email nvarchar(30) null</span><br><span class="line">        --属于约束中的一种，加上constraint</span><br><span class="line">    constraint ck_Email</span><br><span class="line">        --约束语句check(条件)</span><br><span class="line">    check(Email like &apos;%@%[.com .cn]&apos;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">create table score_tb (</span><br><span class="line">    --表格名字一定要加_tb</span><br><span class="line">    id int not null</span><br><span class="line">    identity (1,1)</span><br><span class="line">    constraint pk_Id</span><br><span class="line">    primary key ,</span><br><span class="line">    --创建一个外键</span><br><span class="line">    infoId int not null</span><br><span class="line">        --命名外键名称</span><br><span class="line">    constraint fk_infoId</span><br><span class="line">        --创建外键foreign key references 表名(列名)</span><br><span class="line">        --引用是复数：references</span><br><span class="line">    foreign key references info_tb(id),</span><br><span class="line">    score float not null</span><br><span class="line">    --创建检查约束</span><br><span class="line">    constraint ck_score</span><br><span class="line">    check (score&gt;=0 and score&lt;=100),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--插入(insert)单行数据</span><br><span class="line">insert into info_tb (Name,Address,Email)</span><br><span class="line">values (&apos;张三&apos;,default,&apos;123@qq.com&apos;)</span><br><span class="line"></span><br><span class="line">--插入多行数据（微软官网）</span><br><span class="line">insert into info_tb (Name,Address,Email)</span><br><span class="line">values (&apos;李四&apos;,&apos;杭州&apos;,&apos;2345@qq.com&apos;),</span><br><span class="line">    --逗号分隔，继续下一行数据</span><br><span class="line">(&apos;王五&apos;,&apos;武汉&apos;,&apos;3456@qq.com&apos;)</span><br></pre></td></tr></table></figure><h5 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--更改(update)数据</span><br><span class="line">update info_tb set Email=&apos;5678@qq.com&apos;</span><br><span class="line">where Email=&apos;123@qq.com&apos;</span><br></pre></td></tr></table></figure><h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--删除数据</span><br><span class="line">delete info_tb where Id=1</span><br></pre></td></tr></table></figure><h5 id="清空数据"><a href="#清空数据" class="headerlink" title="清空数据"></a>清空数据</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--清空数据(truncate table)</span><br><span class="line">truncate table score_tb</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建库&quot;&gt;&lt;a href=&quot;#创建库&quot; class=&quot;headerlink&quot; title=&quot;创建库&quot;&gt;&lt;/a&gt;创建库&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="T-SQL" scheme="https://blog.fomeiherz.top/tags/T-SQL/"/>
    
      <category term="sql server" scheme="https://blog.fomeiherz.top/tags/sql-server/"/>
    
      <category term="SQL" scheme="https://blog.fomeiherz.top/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>golang的命名规范</title>
    <link href="https://blog.fomeiherz.top/2018/05/02/golang%E7%9A%84%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>https://blog.fomeiherz.top/2018/05/02/golang的命名规范/</id>
    <published>2018-05-02T02:28:00.000Z</published>
    <updated>2018-05-02T02:29:33.101Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p>公有函数的名字以大写字母开头；私有函数的名字以小写字母开头。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h4&gt;&lt;h4 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h4&gt;&lt;h4 id=&quot;函数
      
    
    </summary>
    
    
      <category term="goland" scheme="https://blog.fomeiherz.top/tags/goland/"/>
    
      <category term="命名规范" scheme="https://blog.fomeiherz.top/tags/%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
</feed>
